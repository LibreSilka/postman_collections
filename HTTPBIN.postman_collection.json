{
	"info": {
		"_postman_id": "974e7824-ff59-402c-87b8-63ceeb74512d",
		"name": "HTTPBIN",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40073456"
	},
	"item": [
		{
			"name": "Authorization",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Pre-request script request\")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Date\");\r",
							"});\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"pm.test(\"Check that name equal abc\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.user).to.eql(\"abc\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "pswd",
							"type": "string"
						},
						{
							"key": "username",
							"value": "abc",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}basic-auth/abc/pswd",
					"host": [
						"{{base_url}}basic-auth"
					],
					"path": [
						"abc",
						"pswd"
					]
				}
			},
			"response": []
		},
		{
			"name": "head request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Pre-request script request\")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Date\");\r",
							"});\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"pm.test(\"Header contains 9593\", function () {\r",
							"    // Получаем заголовок Access-Control-Allow-Methods\r",
							"    let headerValue = pm.response.headers.get(\"Content-Length\");\r",
							"    \r",
							"    // Проверяем, что значение содержит 9593\r",
							"    pm.expect(headerValue).to.include(\"9593\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey"
				},
				"method": "HEAD",
				"header": [],
				"url": {
					"raw": "{{base_url}}",
					"host": [
						"{{base_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "head request Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Pre-request script request\")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Date\");\r",
							"});\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"pm.test(\"Header contains OPTIONS\", function () {\r",
							"    // Получаем заголовок Access-Control-Allow-Methods\r",
							"    let headerValue = pm.response.headers.get(\"Access-Control-Allow-Methods\");\r",
							"    \r",
							"    // Проверяем, что значение содержит OPTIONS\r",
							"    pm.expect(headerValue).to.include(\"OPTIONS\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey"
				},
				"method": "OPTIONS",
				"header": [],
				"url": {
					"raw": "{{base_url}}",
					"host": [
						"{{base_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Pre-request script request\")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Date\");\r",
							"});\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"pm.test(\"Check that date equal something\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.form.data).to.eql(\"something\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "data",
							"value": "something",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://httpbin.org/patch",
					"protocol": "https",
					"host": [
						"httpbin",
						"org"
					],
					"path": [
						"patch"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "httpbin.org/",
			"type": "string"
		}
	]
}